* Fun with functions

** A function with an optional argument
#+index: function!optional argument

Write a function that computes the square root of a number, and that has an optional argument to print what is calculated. The examples below show what your function should do.

#+BEGIN_SRC jupyter-python
### BEGIN SOLUTION
def f(x, prn=None):
    y = x**0.5
    if prn:
        print(f'The sqrt of {x} is {y}.')
    return y
### END SOLUTION

f(4)
#+END_SRC

#+RESULTS:
: 2.0

#+BEGIN_SRC jupyter-python
f(4, True)
#+END_SRC

#+RESULTS:
:RESULTS:
: 2.0
: The sqrt of 4 is 2.0.
:END:

#+BEGIN_SRC jupyter-python
f(4, prn=True)
#+END_SRC

#+RESULTS:
:RESULTS:
: 2.0
: The sqrt of 4 is 2.0.
:END:

** Use a function to break out of a deeply nested loop
#+index: break
#+index: loop

Say we have two lists, and we want to find if the product of two elements is equal to a number, say 9. Here is some awkward code that does that. We have to use break to get out of the inner loop, and then when we break out of the inner loop, also break out of the outer loop.

#+BEGIN_SRC jupyter-python
inner_break = False

for i in [4, 3, 2, 1]:
    for j in [1, 2, 3, 4]:
        print(i, j, i*j, i*j==9)
        if i * j == 9:
            inner_break = True
            break
    if inner_break:
        break

print(i, j)
#+END_SRC

#+RESULTS:
: 4 1 4 False
: 4 2 8 False
: 4 3 12 False
: 4 4 16 False
: 3 1 3 False
: 3 2 6 False
: 3 3 9 True
: 3 3

You can use the =return= statement in a function to do this in a simpler way. Write a function that takes the two lists, and does the double loop inside the function. Instead of using break, when the equality condition is met, simply return i, j from the function. Then, just run the function in the cell to get the answer.

#+BEGIN_SRC jupyter-python

### BEGIN SOLUTION
def f(lst1, lst2):
    for i in lst1:
        for j in lst2:
            if i*j == 9:
                return(i, j)
### END SOLUTION



f([4, 3, 2, 1],   [1, 2, 3, 4])
#+END_SRC

#+RESULTS:
| 3 | 3 |


** A quadratic equation solver
#+index: quadratic

A quadratic equation: $a x^2 + b x + c = 0$ has solutions of $x = \frac{-b \pm \sqrt{b^2 - 4 a c}{2a}$. Write a function that takes the three arguments (a, b, c) and that returns the two roots of the solution. It is possible for the roots to be complex if the radicand $b^2 - 4 a c$ is negative. Note that ~np.sqrt~ cannot handle negative numbers, so in this case you should compute the square root as x**0.5 to get solutions where the radicand is less than zero.

#+BEGIN_SRC jupyter-python
### BEGIN SOLUTION
def quadratic(a, b, c):

    s = (b**2 - 4 * a * c)**0.5
    return (-b + s) / (2 * a), (-b - s) / (2 * a)
### END SOLUTION

quadratic(2, 3, -4), quadratic(1, 1, 1)
#+END_SRC

#+RESULTS:
|                         0.8507810593582121 |         -2.350781059358212 |
| (-0.49999999999999994+0.8660254037844386j) | (-0.5-0.8660254037844386j) |
