# -*- coding: utf-8 -*-
"""08_nla_2_coding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_U2L3d8VyO0-IKv1DEhMvkxq_UpSf-2c

# MCQs
"""
from .MCQs import *

"""# Coding"""

# Commented out IPython magic to ensure Python compatibility.
from IPython.display import display, Markdown
from IPython.core.magic import register_cell_magic
from IPython.core.getipython import get_ipython

import numpy as np
# %matplotlib inline
import matplotlib.pyplot as plt
from scipy.optimize import fsolve
from scipy.integrate import solve_ivp

"""## Supporting Functions"""

def strip_magic(line, cell):
    lines = cell.split('\n')
    stripped_lines = [line for line in lines if not line.strip().startswith('%')]

    if(len(lines)>len(stripped_lines)):
        print('Warning: The % magic does not work in this cell.')

    return ('\n'.join(stripped_lines))

def create_new_cell(contents):

    shell = get_ipython()
    shell.set_next_input(contents, replace=False)

"""## Q1

Magic
"""

@register_cell_magic
def L08Q1(line, cell):

    # correct answer
    def correct():
        def f(x):
            y = -x**2 + 10*x - 15
            return y

        def obj(x):
            p = [-1, 10, -15]
            pd = np.polyder(p)
            dev = np.polyval(pd, x)
            return dev

        guess = 2
        sol = fsolve(obj, guess)

        X = np.linspace(0, 10)
        Y = -X**2 + 10*X - 15
        plt.plot(sol, f(sol), 'ko', label = 'Correct', alpha = 0.3)
        plt.legend()

        return

    globals = dict()
    exec(strip_magic(line, cell), globals)

    correct()

"""Question"""

def Code1():

    display(Markdown("""Using fsolve, polyder and polyval, find the point where the polynomial $-x^2 + 10x -15$ reaches a maximum."""))

    c = """%%L08Q1
# import the required packages


# define the polynomial in this function
def f(x):

    return y

# complete the objective function for fsolve()
def obj():

    return

# complete the fsolve function call
guess =
sol = fsolve()

# plot


"""


    create_new_cell(c)

# Code1()

print('Code1() imported')

"""## Q2

Magic
"""

@register_cell_magic
def L08Q2(line, cell):

    # correct answer
    def correct():
        def objective(X):
            x, y = X
            z1 = y*x - 10
            z2 = x**2 + y**2 - 25
            return np.array([z1, z2])

        guess1 = [2, 4]
        sol1 = fsolve(objective, guess1)
        guess2 = [4, 2]
        sol2 = fsolve(objective, guess2)

        x1 = np.linspace(2, 5)
        y1 = 10/x1

        y2 = np.sqrt(25-x1**2)
        # plt.plot(x1, y1)
        # plt.plot(x1, y2)
        plt.plot(*sol1, 'ko', label = 'Correct', alpha = 0.3)
        plt.plot(*sol2, 'ko', alpha = 0.3)
        plt.legend()

        return

    globals = dict()
    exec(strip_magic(line, cell), globals)

    correct()

"""Question"""

def Code2():

    display(Markdown("""Find the solution/s to the two equations: xy = 10 and x^2 + y^2 = 25,
between the range (2, 5). Plot the equations along with the solutions."""))

    c = """%%L08Q2
# import the required packages


# complete the objective function for fsolve()
def objective():

    return np.array([])

# determine the guess/es and fsolve() function calls based on the number of solutions in the given range


# plot


"""


    create_new_cell(c)

# Code2()

print('Code2() imported')
