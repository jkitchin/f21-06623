# -*- coding: utf-8 -*-
"""16_linear_algebra_coding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jP_AJv2_HEzred6cu2LyQO2E31-B3CIi

# MCQs
"""

from .MCQs import *

"""# Coding"""

from IPython.display import display, Markdown
from IPython.core.magic import register_cell_magic
from IPython.core.getipython import get_ipython

import numpy as np
import sympy

"""## Supporting Functions"""

def strip_magic(line, cell):
    lines = cell.split('\n')
    stripped_lines = [line for line in lines if not line.strip().startswith('%')]

    if(len(lines)>len(stripped_lines)):
        print('Warning: The % magic does not work in this cell.')

    return ('\n'.join(stripped_lines))

def create_new_cell(contents):

    shell = get_ipython()
    shell.set_next_input(contents, replace=False)

def within(x, y):
    return np.allclose(x, y)

"""## Q1

Magic
"""

@register_cell_magic
def L16Q1(line, cell):

    # correct answer
    def correct():
        A = np.array([1, 2])
        B = np.array( [[2, 3, 4], [3, 4, 5]])
        C = np.array([[-1, 8, 9], [0, -1, 1]])
        D = np.array([1, -1])

        ans = A @ B @ C.T @ D
        return ans

    globals = dict()
    exec(cell, globals)

    # Now we can check if something was done
    Ans = globals.get('ans', None)

    if Ans is None:
        print('Looks like you have changed the "ans" variable. Use the original template variables.')
        return

    if within(Ans, correct()):
        print('Correct')
    else:
        print('Incorrect')

"""Question"""

def Code1():

    display(Markdown("""Find the single value answer of the multiplication of the matrices : A,B,C,D, where

A = [1, 2]

B = [[2, 3, 4], [3, 4, 5]]

C = [[-1, 8, 9], [0, -1, 1]]

D = [1, -1]"""))

    c = """%%L16Q1
# import the required packages


# use linear algebra to solve

A = np.array([1, 2])
B = np.array([[2, 3, 4], [3, 4, 5]])
C = np.array([[-1, 8, 9], [0, -1, 1]])
D = np.array([1, -1])

# final answer
ans =

"""

    create_new_cell(c)

# Code1()

print('Code1() imported')

"""## Q2

Magic
"""

@register_cell_magic
def L16Q2(line, cell):

    # correct answer
    def correct():
        A = np.array([[1, -1, 2, 3], [2, 5, -3, -2], [4, 3, 1, 4], [3, 4, -1, 1]])
        M = sympy.Matrix(A)
        reduced_form, inds = M.rref()

        return reduced_form

    globals = dict()
    exec(cell, globals)

    # Now we can check if something was done
    RF = globals.get('reduced_form', None)

    if RF is None:
        print('Looks like you have changed the "reduced_form" variable. Use the original template variables.')
        return

    if within(np.array(RF).astype(np.float), np.array(correct()).astype(np.float)):
        print('Correct')
    else:
        print('Incorrect')

"""Question"""

def Code2():

    display(Markdown("""Find the reduced row echelon form of the matrix:

    A = [[1, -1, 2, 3], [2, 5, -3, -2], [4, 3, 1, 4], [3, 4, -1, 1]]"""))

    c = """%%L16Q2
# import the required packages


# use linear algebra to solve
A = np.array([[1, -1, 2, 3], [2, 5, -3, -2], [4, 3, 1, 4], [3, 4, -1, 1]])

# final answer
reduced_form =

"""

    create_new_cell(c)

# Code2()

print('Code2() imported')
