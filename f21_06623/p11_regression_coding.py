# -*- coding: utf-8 -*-
"""11_regression_coding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-O9zsh-NWbiFrnaj0THufCEEOxn2T8Iw

# MCQs
"""

from .MCQs import *

"""# Coding"""

# Commented out IPython magic to ensure Python compatibility.
from IPython.display import display, Markdown
from IPython.core.magic import register_cell_magic
from IPython.core.getipython import get_ipython

import numpy as np
from scipy.optimize import minimize, curve_fit
# %matplotlib inline
import matplotlib.pyplot as plt

"""## Supporting Functions"""

def strip_magic(line, cell):
    lines = cell.split('\n')
    stripped_lines = [line for line in lines if not line.strip().startswith('%')]

    if(len(lines)>len(stripped_lines)):
        print('Warning: The % magic does not work in this cell.')

    return ('\n'.join(stripped_lines))

def create_new_cell(contents):

    shell = get_ipython()
    shell.set_next_input(contents, replace=False)

def within_array(x, y):
    return np.allclose(x, y)

"""## Q1

Magic
"""

@register_cell_magic
def L11Q1(line, cell):

    # correct answer
    def correct():

        x = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])
        y = np.array([0.37, 0.54, 0.45, 0.29, 0.17, 0.09, 0.04, 0.02, 0.01, 0.005])

        def obj(pars, x):
            b0, b1, b2, b3 = pars
            Y = b0 + b1*x + b2*x**2 + b3*x**3
            return Y

        def loss(pars):
            err = y - obj(pars, x)
            return np.sum(err**2)

        guess = [0.3, 0.13, 0, 0]
        sol = minimize(loss, guess)

        Y = sol.x[0] + sol.x[1]*x + sol.x[2]*x**2 + sol.x[3]*x**3
        plt.plot(x, Y, 'ko', label = 'Correct', alpha = 0.3)
        plt.legend()

        return

    globals = dict()
    exec(strip_magic(line, cell), globals)

    correct()

"""Question"""

def Code1():

    display(Markdown("""Using scipy.optimize.minimize, find the parameters for the equation $y = b_0 + b_1x + b_2x^2 + b_3x^3$, given the data:

x = 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0

y = 0.37, 0.54, 0.45, 0.29, 0.17, 0.09, 0.04, 0.02, 0.01, 0.005.

Plot the final function based on the parameters that you obtain."""))

    c = """%%L11Q1
# import the required packages


x = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])
y = np.array([0.37, 0.54, 0.45, 0.29, 0.17, 0.09, 0.04, 0.02, 0.01, 0.005])

# complete the model
def eqn(pars, x):

    return

# complete the minimize objective function
def obj():

    return

# guess and minimize function call
guess =
sol = minimize()
print(sol.message)


# plot

"""

    create_new_cell(c)

# Code1()

print('Code1() imported')

"""## Q2

Magic
"""

@register_cell_magic
def L11Q2(line, cell):

    # correct answer
    def correct():

        def func(x, b0, b1, b2, b3):
            return b0 + b1*x + b2*x**2 + b3*x**3

        x = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])
        y = np.array([0.37, 0.54, 0.45, 0.29, 0.17, 0.09, 0.04, 0.02, 0.01, 0.005])

        guess = [0.3, 0.13, 0, 0]
        pars, pcov = curve_fit(func, x, y, p0=guess)


        return pars

    globals = dict()
    exec(cell, globals)

    # Now we can check if something was done
    Pars = globals.get('pars', None)

    if Pars is None:
        print('Looks like you have changed the "pars" variable. Use the original template variables.')
        return

    if within_array(Pars, correct()):
        print('Correct')
    else:
        print('Incorrect.')

"""Question"""

def Code2():

    display(Markdown("""Use scipy.optimize.curve_fit to find the parameters
for the equation $y = b_0 + b_1x + b_2x^2 + b_3x^3$, given the data:

x = 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0

y = 0.37, 0.54, 0.45, 0.29, 0.17, 0.09, 0.04, 0.02, 0.01, 0.005."""))

    c = """%%L11Q2
# import the required packages


# complete the objective function
def func():
    return

x = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])
y = np.array([0.37, 0.54, 0.45, 0.29, 0.17, 0.09, 0.04, 0.02, 0.01, 0.005])

# initial guess and curve_fit function call
guess =
pars, pcov = curve_fit()

"""

    create_new_cell(c)

# Code2()

print('Code2() imported')
