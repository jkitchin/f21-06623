# -*- coding: utf-8 -*-
"""10_min_max_coding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZclWzAWEeeXb7JVxqR0zpVQvbQUL04aL

# MCQs
"""

from .MCQs import *

"""# Coding"""

# Commented out IPython magic to ensure Python compatibility.
from IPython.display import display, Markdown
from IPython.core.magic import register_cell_magic
from IPython.core.getipython import get_ipython

from scipy.optimize import minimize
import numpy as np
# %matplotlib inline
import matplotlib.pyplot as plt

"""## Supporting Functions"""

def strip_magic(line, cell):
    lines = cell.split('\n')
    stripped_lines = [line for line in lines if not line.strip().startswith('%')]

    if(len(lines)>len(stripped_lines)):
        print('Warning: The % magic does not work in this cell.')

    return ('\n'.join(stripped_lines))

def create_new_cell(contents):

    shell = get_ipython()
    shell.set_next_input(contents, replace=False)

def within_num(x, y):
    tol = 1e-6
    return not ((x < (y - tol)) or (y < (x - tol)))

"""## Q1

Magic
"""

@register_cell_magic
def L10Q1(line, cell):

    # correct answer
    def correct():
        x = np.linspace(-10, 10)

        def f(x):

            return (x-2)**2 * np.sin(x)

        guess = -6
        sol = minimize(f, guess)

        return sol.x[0]

    globals = dict()
    exec(strip_magic(line, cell), globals)

    # Now we can check if something was done
    Sol = globals.get('sol', None)

    if Sol is None:
        print('Looks like you have changed the "sol" variable. Use the original template variables.')
        return

    if within_num(Sol.x[0], correct()):
        print('Correct')
    else:
        print('Incorrect; Try plotting the function in the given range to see where the minimum can occur.')

"""Question"""

def Code1():

    display(Markdown('Find the point where the function: $(x-2)^2 sin(x)$, is at its minimum between the range x = (-10, 10).'))

    c = """%%L10Q1
# import the required packages


# complete the objective function
def f():

    return

guess =
# minimize() function call
sol = minimize()

"""

    create_new_cell(c)

# Code1()

print('Code1() imported')

"""## Q2

Magic
"""

@register_cell_magic
def L10Q2(line, cell):

    # correct answer
    def correct():
        x = np.linspace(-10, 10)

        def f(x):

            return -(x-2)**2 * np.sin(x)

        guess = -6
        sol = minimize(f, guess)

        return sol.x[0]

    globals = dict()
    exec(strip_magic(line, cell), globals)

    # Now we can check if something was done
    Sol = globals.get('sol', None)

    if Sol is None:
        print('Looks like you have changed the "sol" variable. Use the original template variables.')
        return

    if within_num(Sol.x[0], correct()):
        print('Correct')
    else:
        print('Incorrect; Try plotting the function in the given range to see where the maximum can occur.')

"""Question"""

def Code2():

    display(Markdown('Find the point where the function: $(x-2)^2 sin(x)$, is at its maximum between the range x = (-10, 10).'))

    c = """%%L10Q2
# import the required packages


# complete the objective function
def f():

    return

guess =
# minimize() function call
sol = minimize()

"""

    create_new_cell(c)

# Code2()

print('Code2() imported')
