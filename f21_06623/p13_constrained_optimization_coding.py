# -*- coding: utf-8 -*-
"""13_constrained_optimization_coding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1liQ9kujd-Jx3L7aE6sP-NcBfLDaw5hNt

# MCQs
"""

from .MCQs import *

"""# Coding"""

# Commented out IPython magic to ensure Python compatibility.
from IPython.display import display, Markdown
from IPython.core.magic import register_cell_magic
from IPython.core.getipython import get_ipython

import numpy as np
from scipy.optimize import minimize
# %matplotlib inline
import matplotlib.pyplot as plt

"""## Supporting Functions"""

def strip_magic(line, cell):
    lines = cell.split('\n')
    stripped_lines = [line for line in lines if not line.strip().startswith('%')]

    if(len(lines)>len(stripped_lines)):
        print('Warning: The % magic does not work in this cell.')

    return ('\n'.join(stripped_lines))

def create_new_cell(contents):

    shell = get_ipython()
    shell.set_next_input(contents, replace=False)

def within_num(x, y):
    return np.allclose(x, y)

"""## Q1

Magic
"""

@register_cell_magic
def L13Q1(line, cell):

    # correct answer
    def correct():

        def obj(x):
            return x**2

        def eq1(x):
            return -10 - 0.5*x + x**2

        c  ={'type': 'ineq', 'fun': eq1}

        guess = [-2]
        sol = minimize(obj, guess, constraints = c)


        return sol.fun

    globals = dict()
    exec(strip_magic(line, cell), globals)

    # Now we can check if something was done
    Sol = globals.get('sol', None)

    if Sol is None:
        print('Looks like you have changed the "sol" variable. Use the original template variables.')
        return

    if within_num(Sol.fun, correct()):
        print('Correct')
    else:
        print('Incorrect. Try plotting the function and the constraints to get a better idea.')

"""Question"""

def Code1():

    display(Markdown("""Find the minimum value of the function $f(x) = x^2$, which lies above the line $f_l(x) = 10 + 0.5x$."""))

    c = """%%L13Q1
# import the required packages


# complete the main function
def obj():
    return

# complete the constraint
def eq1():
    return

# constraint
constraint  ={}

# guess and minimize function call
guess =
sol = minimize()

"""

    create_new_cell(c)

# Code1()

print('Code1() imported')

"""## Q2

Magic
"""

@register_cell_magic
def L13Q2(line, cell):

    # correct answer
    def correct():

        def obj(x):
            return -np.tan(-x)

        def eq(x):
            return -np.cos(x) + np.tan(x)

        c = {'type': 'ineq', 'fun': eq}

        guess = [0.5]
        sol = minimize(obj, guess, constraints = c)

        return sol.fun

    globals = dict()
    exec(strip_magic(line, cell), globals)

    # Now we can check if something was done
    Sol = globals.get('sol', None)

    if Sol is None:
        print('Looks like you have changed the "sol" variable. Use the original template variables.')
        return

    if within_num(Sol.fun, correct()):
        print('Correct')
    else:
        print('Incorrect. Try plotting the function and the constraints to get a better idea.')

"""Question"""

def Code2():

    display(Markdown("""Find the maximum value of tan() which lies under cos()."""))

    c = """%%L13Q2
# import the required packages


# complete the main function
def obj():
    return

# complete the constraint
def eq1():
    return

# constraint
constraint  ={}

# guess and minimize function call
guess =
sol = minimize()

"""

    create_new_cell(c)

# Code2()

print('Code2() imported')
